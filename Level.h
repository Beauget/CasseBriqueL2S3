#ifndef LEVEL_H
#define LEVEL_H
#include <iostream>
extern "C" {
#include <curses.h>
}
#include <iostream>
#include "window.h"
#include "Brick.h"
#include "Ball.h"
#include "Paddle.h"
#include "Home.h"
<<<<<<< HEAD
#include "Score.h"
=======
>>>>>>> 2baa47a768861420483e90688cf2e811ce9ad6bd
#include <vector>

class Level {
private:
    size_t m_NbBrick;
    size_t m_NbBall;
    size_t m_NbBonus;
    rectangle m_gameWindowsSize;
    rectangle m_MenuWindowsSize;
    std::vector<Brick> m_TabBrick;
    std::vector<Ball> m_TabBall;
    std::vector<Paddle> m_TabPaddle;
    int m_Score;
    int m_Hp;
    int m_Jump;
public:
    //Builder/Destructor
<<<<<<< HEAD
    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : default constructor
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    Level();
    //Accessors
    ////////////////////////////////////////////////////////////
    /// Input : all attribut of Level class
    ///
    /// Result : build a level with parameter
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    Level(size_t,size_t,size_t,rectangle,rectangle,std::vector<Brick>,std::vector<Ball>,std::vector<Paddle>,int,int,int);
    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : destruct this->level
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    ~Level();
    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : return m_NbBrick
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    size_t getNbBrick() const;
    ////////////////////////////////////////////////////////////
    /// Input : Number of brick
    ///
    /// Result : change m_NbBrick
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setNbBrick(size_t);
    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : return m_NbBall
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    size_t getNbBall() const;
    ////////////////////////////////////////////////////////////
    /// Input : Number of ball
    ///
    /// Result : change m_NbBall
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setNbBall(size_t);
    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : return m_NbBonus
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    size_t getNbBonus() const;
    ////////////////////////////////////////////////////////////
    /// Input : Number of bonus
    ///
    /// Result : change m_NbBonus
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setNbBonus(size_t);

    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : return m_gameWindowsSize
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    rectangle getGameWindowsSize() const;
    ////////////////////////////////////////////////////////////
    /// Input : rectangle
    ///
    /// Result : change m_gameWindowsSize
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setGameWindowsSize(rectangle);

    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : return m_MenuWindowsSize
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    rectangle getMenuWindowsSize() const;

    ////////////////////////////////////////////////////////////
    /// Input : rectangle
    ///
    /// Result : change m_MenuWindowsSize
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setMenuWindowsSize(rectangle);

    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : return m_TabBrick
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    std::vector<Brick> getTabBrick() const;
    ////////////////////////////////////////////////////////////
    /// Input : std::vector<Brick>
    ///
    /// Result : change m_TabBrick
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setTabBrick(std::vector<Brick>);
    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : return m_TabBall
    ///
    /// info :
    ////////////////////////////////////////////////////////////

    std::vector<Ball> getTabBall() const;
    ////////////////////////////////////////////////////////////
    /// Input : std::vector<ball>
    ///
    /// Result : change m_TabBall
=======
    Level();
    Level(size_t,size_t,size_t,rectangle,rectangle,std::vector<Brick>,std::vector<Ball>,std::vector<Paddle>,int,int,int);
    ~Level();

    //Accessors
    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    size_t getNbBrick() const;
    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setNbBrick(size_t);
    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    size_t getNbBall() const;
    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setNbBall(size_t);
    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    size_t getNbBonus() const;
    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setNbBonus(size_t);

    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    rectangle getGameWindowsSize() const;
    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setGameWindowsSize(rectangle);

    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    rectangle getMenuWindowsSize() const;

    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setMenuWindowsSize(rectangle);

    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    std::vector<Brick> getTabBrick() const;
    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setTabBrick(std::vector<Brick>);
    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////

    std::vector<Ball> getTabBall() const;
    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
>>>>>>> 2baa47a768861420483e90688cf2e811ce9ad6bd
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setTabBall(std::vector<Ball>);
    ////////////////////////////////////////////////////////////
<<<<<<< HEAD
    /// Input : none
    ///
    /// Result : return m_TabPaddle
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    std::vector<Paddle> getTabPaddle() const;
    ////////////////////////////////////////////////////////////
    /// Input : std::vector<Paddle>
    ///
    /// Result : change m_TabPaddle
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setTabPaddle(std::vector<Paddle>);
    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : return m_Score
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    int getScore() const;
    ////////////////////////////////////////////////////////////
    /// Input : int
    ///
    /// Result : change m_Score
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setScore(int);

    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : return m_Hp
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    int getHp() const;
    ////////////////////////////////////////////////////////////
    /// Input : int
    ///
    /// Result : change m_Hp
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setHp(int);

    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : return m_Jump
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    int getJump() const;
    ////////////////////////////////////////////////////////////
    /// Input : int
    ///
    /// Result : change m_Jump
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setJump(int);
    //Method
    ////////////////////////////////////////////////////////////
    /// Input : none
    ///
    /// Result : create menu with best score
    ///
    /// info :
    ////////////////////////////////////////////////////////////
=======
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    std::vector<Paddle> getTabPaddle() const;
    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setTabPaddle(std::vector<Paddle>);
    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    int getScore() const;
    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setScore(int);

    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    int getHp() const;
    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setHp(int);

    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    int getJump() const;
    ////////////////////////////////////////////////////////////
    /// Input :
    ///
    /// Result :
    ///
    /// info :
    ////////////////////////////////////////////////////////////
    void setJump(int);
    //Method
>>>>>>> 2baa47a768861420483e90688cf2e811ce9ad6bd
    void createMenu();

};

#endif /* LEVEL_H */
